library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
#1.
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
#1.
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
#manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
install.packages('rCharts')
install.packages('rCharts')
library(swirl)
swirl()
swirl()
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
manipulate(myPlot(beta), beta = slider(0.4, .8, step = 0.02))
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
manipulate(myPlot(beta), beta = slider(0.4, .8, step = 0.02))
swirl()
swirl()
manipulate(myPlot(beta), beta = slider(0.4, .8, step = 0.02))
swirl()
cor(gpa_nor, gch_nor)
cor(galton$parent, galton$child)
cor(gpa_nor, gch_nor)
swirl()
l_nor <- lm(gch_nor ~ gpa_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
l_nor
swirl()
fit <- lm(child ~ parent, galton)
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
deviance(fit)/(n-2)
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child - mu)^2)
sRes <- deviance(fit)
1 - sRes/sTot
summary(fit)$r
summary(fit)$r.squared
(cor(galton$child, galton$parent))^2
cor(galton$parent, galton$child)^2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ ones + parent, galton)
lm(child ~ 1, galton)
mean(galton$child)
lm(child ~ 1, galton)
swirl()
View(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
data(mtcars)
m <- lm(mpg ~ wt+cyl, data = mtcars)
summary(m)
(8-4)*m$coefficients['cyl']
m <- lm(mpg ~ cyl, data = mtcars)
summary(m)
(8-4)*m$coefficients['cyl']
summary(lm.SR <- lm(sr ~ pop15 + pop75 + dpi + ddpi,
data = LifeCycleSavings),
corr = TRUE)
utils::str(lmI <- lm.influence(lm.SR))
lm.SR <- lm(sr ~ pop15 + pop75 + dpi + ddpi, data = LifeCycleSavings)
inflm.SR <- influence.measures(lm.SR)
which(apply(inflm.SR$is.inf, 1, any))
# which observations 'are' influential
summary(inflm.SR) # only these
inflm.SR          # all
plot(rstudent(lm.SR) ~ hatvalues(lm.SR)) # recommended by some
rs <- rstandard(lm.SR)
iflSR <- influence(lm.SR)
identical(rs, rstandard(lm.SR, infl = iflSR))
## to "see" the larger values:
1000 * round(dfbetas(lm.SR, infl = iflSR), 3)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y~x)
hatvalues(fit)
dfbetas(fit)
cooks.distance(fit)
influence.measures(fit)
influencePlot
library(car)
influencePlot(fit)
influencePlot(fit, id.n=3)
leveragePlots(fit)
av.Plots(fit)
# Cook's D plot
# identify D values > 4/(n-k-1)
cutoff <- 4/((nrow(mtcars)-length(fit$coefficients)-2))
plot(fit, which=4, cook.levels=cutoff)
influencePlot(fit,   id.method="identify", main="Influence Plot", sub="Circle size is proportial to Cook's Distance" )
dfbetas(fit)
hatvalues(fit)
dfbetas(fit)
head(mtcars)
library(ggplot2)
data(mtcars)
boxplot(mpg~am, data=mtcars)
p <- ggplot(mtcars, aes(factor(am), mpg))
p + geom_boxplot()
library(ggplot2)
library(ggplot)
intall.packages('ggplot2')
install.packages('ggplot2')
library(ggplot2)
ggplot(mtcars, aes(factor(am), mpg)) + geom_boxplot()
ggplot(mtcars, aes(am, mpg)) + geom_boxplot()
p <- ggplot(mtcars, aes(factor(cyl), mpg))
p + geom_boxplot()
library(ggplot2)
p <- ggplot(mtcars, aes(factor(cyl), mpg))
p + geom_boxplot()
library(ggplot2)
ggplot(mtcars, aes(factor(am), mpg)) + geom_boxplot()
ggplot(mtcars, aes(factor(am), mpg)) + geom_boxplot()
version
version
library(ggplot2)
ggplot(mtcars, aes(factor(am), mpg)) + geom_boxplot()
ggplot(mtcars, aes(factor(am), mpg)) + geom_boxplot() + geom_boxplot(aes(fill = factor(am)))
qplot(am, mpg, data = mtcars, colour = am)
library(ggplot2)
qplot(as.factor(am), mpg, data = mtcars, colour = am)
ggplot(mtcars, aes(factor(am), mpg)) + geom_boxplot() + geom_boxplot(aes(fill = factor(am)))
m <- lm(mpg~am, data=mtcars)
summary(m)
m <- lm(mpg~., data=mtcars)
summary(m)
step(m)
qplot(wt, mpg, data = mtcars, colour = am)
qplot(wt, mpg, data = mtcars, colour = am) + geom_line()
qplot(wt, mpg, data = mtcars, group = am) + geom_line()
qplot(wt, mpg, data = mtcars, colour = am) + geom_line(colour = am)
qplot(wt, mpg, data = mtcars, colour = am) + geom_line(colour = mtcars$am)
ggplot(mtcars, aes(wt, mpg), group = am) + geom_line()
ggplot(mtcars, aes(as.factor(am), mpg)) + geom_boxplot(aes(fill = as.factor(am)))
p + facet_grid(. ~ as.factor(am))
# With one variable
p + facet_grid(. ~ as.factor(am))
p <- ggplot(mtcars, aes(mpg, wt)) + geom_point()
# With one variable
p + facet_grid(. ~ as.factor(am))
p <- ggplot(mtcars, aes(mpg, wt)) + geom_point()
# With one variable
p + facet_grid(. ~ am)
p <- ggplot(mtcars, aes(mpg, wt)) + geom_point()
# With one variable
p + facet_grid(am ~ .)
p <- ggplot(mtcars, aes(wt, mpg)) + geom_point()
# With one variable
p + facet_grid(. ~ am)
p <- ggplot(mtcars, aes(wt, mpg)) + geom_point() + geom_stat()
# With one variable
p + facet_grid(. ~ am)
ggplot(mtcars, aes(factor(am), mpg)) + geom_boxplot(aes(fill = factor(am)))
p <- ggplot(mtcars, aes(wt, mpg, colour = factor(am))) + geom_point()
# With one variable
p + facet_grid(. ~ am)
p <- ggplot(mtcars, aes(wt, mpg, colour = factor(am))) + geom_point() + stat_smooth()
p + facet_grid(. ~ am)
p <- ggplot(mtcars, aes(wt, mpg, colour = factor(am))) + geom_point() + stat_smooth(method='lm')
p + facet_grid(. ~ am)
step(m)
p <- ggplot(mtcars, aes(qsec, mpg, colour = factor(am))) + geom_point() + stat_smooth(method='lm')
p + facet_grid(. ~ am)
summary(m)
anova(m)
plot(mtcars)
influence(m)
p <- ggplot(mtcars, aes(qsec, mpg, colour = factor(am))) + geom_point() + stat_smooth(method='lm')
p + facet_grid(. ~ am)
ggplot(mtcars, aes(factor(am), mpg)) + geom_density(aes(fill = factor(am)))
ggplot(mtcars, aes(factor(am), mpg)) + geom_density()
p <- ggplot(mtcars, aes(x=mpg)) + geom_density()
p + facet_grid(. ~ am)
p <- ggplot(mtcars, aes(x=mpg)) + geom_hist()
p + facet_grid(. ~ am)
p <- ggplot(mtcars, aes(x=mpg)) + geom_histogram()
p + facet_grid(. ~ am)
p <- ggplot(mtcars, aes(x=mpg)) + geom_histogram(bindwidth=3)
p + facet_grid(. ~ am)
p <- ggplot(mtcars, aes(x=mpg)) + geom_histogram(bindwidth=1)
p + facet_grid(. ~ am)
p <- ggplot(mtcars, aes(x=mpg)) + geom_histogram(bindwidth=10)
p + facet_grid(. ~ am)
p <- ggplot(mtcars, aes(x=mpg)) + geom_histogram(bindwidth=5)
p + facet_grid(. ~ am)
p <- ggplot(mtcars, aes(x=mpg)) + geom_histogram(bindwidth=0.5)
p + facet_grid(. ~ am)
p <- ggplot(mtcars, aes(x=mpg)) + geom_histogram(bindwidth=6)
p + facet_grid(. ~ am)
p <- ggplot(mtcars, aes(x=mpg)) + geom_density()
p + facet_grid(. ~ am)
p <- ggplot(mtcars, aes(x=mpg)) + geom_density(aes(fill = factor(am)))
p + facet_grid(. ~ am)
m <- lm(mpg~am, data=mtcars)
summary(m)
m <- lm(mpg~., data=mtcars)
summary(m)
step(m)
summary(m)
mwo <- lm(mpg~-am., data=mtcars)
summary(m)
mw <- lm(mpg~., data=mtcars)
summary(m)
library(lmtest)
lrtest(mwo, mw)
mwo <- lm(mpg~.-am, data=mtcars)
summary(m)
mw <- lm(mpg~., data=mtcars)
summary(m)
library(lmtest)
lrtest(mwo, mw)
ggplot(mtcars, aes(wt, mpg, group = aes(factor(am), colour=factor(am))) + geom_point()
ggplot(mtcars, aes(wt, mpg, group = aes(factor(am), colour=factor(am)))) + geom_point()
ggplot(mtcars, aes(wt, mpg)) + geom_point(aes(colour = factor(am)))
ggplot(mtcars, aes(wt, mpg)) + geom_point(aes(colour = factor(am), size = 4))
p <- ggplot(mtcars, aes(x=mpg)) + geom_density(aes(fill = factor(am)))
p + facet_grid(. ~ am)
#influence(m)
slidify("index.Rmd")
getwd()
setwd("C:/Users/SANDIPAN DEY/Desktop/coursera/Developing Data Products/Project/slidify-pitch//sandipan.github.io")
library(slidify)
slidify("index.Rmd")
