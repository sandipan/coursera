import math
	
# h / g^x_1 = (g^B)^x_0
# g^x_1 . q' = h (mod p) => xgcd(g^x_1, p) = [1, q, y] => h * xgcd(g^x_1, p) = [h, q', y'] 
def meet_in_the_middle(p, g, h, B):
	
	dict = {}
	#print B
	pow_g_x_1 = 1
	
	for x_1 in range(B + 1):
		dict[gmpy2.divm(h, pow_g_x_1, p)] = x_1
		pow_g_x_1 = (pow_g_x_1 * g) % p
	
	print('Done 1')
	
	#print len(dict)
	#for key, val in dict.items():
	#	print(str(key) + ': ' + str(val))
		
	pow_g_B = pow(g, B) % p
	pow_g_B_x_0 = 1
	
	for x_0 in range(B + 1):
		x_1 = dict.get(pow_g_B_x_0, None)
		if x_1 != None:
			x = B * x_0 + x_1
			print (x_0, x_1)
			print (x)
			break
		#if (pow_g_B_x_0 != powmod(g, B * x_0, p)):
		#	print 'not equal'
		#	break
		pow_g_B_x_0 = (pow_g_B_x_0 * pow_g_B) % p
	
	print('Done 2')

p = 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084171
g = 11717829880366207009516117596335367088558084999998952205599979459063929499736583746670572176471460312928594829675428279466566527115212748467589894601965568
h = 3239475104050450443565264378728065788649097520952449527834792452971981976143292558073856937958553180532878928001494706097394108577585732452307673444020333
B = pow(2, 20)

#print isprime(p)
#p = 11
#g = 3
#h = 5
#B = pow(2, 1)
meet_in_the_middle(p, g, h, B)

import gmpy2
from gmpy2 import mpz

N = 179769313486231590772930519078902473361797697894230657273430081157732675805505620686985379449212982959585501387537164015710139858647833778606925583497541085196591615128057575940752635007475935288710823649949940771895617054361149474865046711015101563940680527540071584560878577663743040086340742855278549092581
def challenge_1():
	A = gmpy2.isqrt(N) + 1
	x = gmpy2.isqrt(A * A - N)
	p = A - x
	q = A + x
	print(p)

#challenge_1()
	
N = 648455842808071669662824265346772278726343720706976263060439070378797308618081116462714015276061417569195587321840254520655424906719892428844841839353281972988531310511738648965962582821502504990264452100885281673303711142296421027840289307657458645233683357077834689715838646088239640236866252211790085787877
def challenge_2():
	A = gmpy2.isqrt(N) + 1
	x = gmpy2.isqrt(A * A - N)
	p = A - x
	q = A + x
	print(p)

N = 720062263747350425279564435525583738338084451473999841826653057981916355690188337790423408664187663938485175264994017897083524079135686877441155132015188279331812309091996246361896836573643119174094961348524639707885238799396839230364676670221627018353299443241192173812729276147530748597302192751375739387929
c = 22096451867410381776306561134883418017410069787892831071731839143676135600120538004282329650473509424343946219751512256465839967942889460764542040581564748988013734864120452325229320176487916666402997509188729971690526083222067771600019329260870009579993724077458967773697817571267229951148662959627934791540
